// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	entities "user-management-backend/entities"

	mock "github.com/stretchr/testify/mock"
)

// SuperAdminRepoInterface is an autogenerated mock type for the SuperAdminRepoInterface type
type SuperAdminRepoInterface struct {
	mock.Mock
}

// GetActiveAdmins provides a mock function with given fields:
func (_m *SuperAdminRepoInterface) GetActiveAdmins() ([]entities.Actor, error) {
	ret := _m.Called()

	var r0 []entities.Actor
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]entities.Actor, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entities.Actor); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Actor)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApprovedAdmins provides a mock function with given fields:
func (_m *SuperAdminRepoInterface) GetApprovedAdmins() ([]entities.RegisterApproval, error) {
	ret := _m.Called()

	var r0 []entities.RegisterApproval
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]entities.RegisterApproval, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entities.RegisterApproval); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.RegisterApproval)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPendingAdmins provides a mock function with given fields:
func (_m *SuperAdminRepoInterface) GetPendingAdmins() ([]entities.RegisterApproval, error) {
	ret := _m.Called()

	var r0 []entities.RegisterApproval
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]entities.RegisterApproval, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entities.RegisterApproval); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.RegisterApproval)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRegisterAdminById provides a mock function with given fields: id
func (_m *SuperAdminRepoInterface) GetRegisterAdminById(id *uint) (entities.RegisterApproval, error) {
	ret := _m.Called(id)

	var r0 entities.RegisterApproval
	var r1 error
	if rf, ok := ret.Get(0).(func(*uint) (entities.RegisterApproval, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(*uint) entities.RegisterApproval); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entities.RegisterApproval)
	}

	if rf, ok := ret.Get(1).(func(*uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRegisterRequestAdmins provides a mock function with given fields:
func (_m *SuperAdminRepoInterface) GetRegisterRequestAdmins() ([]entities.RegisterApproval, error) {
	ret := _m.Called()

	var r0 []entities.RegisterApproval
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]entities.RegisterApproval, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entities.RegisterApproval); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.RegisterApproval)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRejectedAdmins provides a mock function with given fields:
func (_m *SuperAdminRepoInterface) GetRejectedAdmins() ([]entities.RegisterApproval, error) {
	ret := _m.Called()

	var r0 []entities.RegisterApproval
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]entities.RegisterApproval, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entities.RegisterApproval); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.RegisterApproval)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVerifiedAdmins provides a mock function with given fields:
func (_m *SuperAdminRepoInterface) GetVerifiedAdmins() ([]entities.Actor, error) {
	ret := _m.Called()

	var r0 []entities.Actor
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]entities.Actor, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entities.Actor); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Actor)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyRegisterAdminById provides a mock function with given fields: adminRegister
func (_m *SuperAdminRepoInterface) ModifyRegisterAdminById(adminRegister *entities.RegisterApproval) error {
	ret := _m.Called(adminRegister)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.RegisterApproval) error); ok {
		r0 = rf(adminRegister)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveAdminById provides a mock function with given fields: id
func (_m *SuperAdminRepoInterface) RemoveAdminById(id *uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(*uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveRegisterAdminById provides a mock function with given fields: id
func (_m *SuperAdminRepoInterface) RemoveRegisterAdminById(id *uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(*uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewSuperAdminRepoInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewSuperAdminRepoInterface creates a new instance of SuperAdminRepoInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSuperAdminRepoInterface(t mockConstructorTestingTNewSuperAdminRepoInterface) *SuperAdminRepoInterface {
	mock := &SuperAdminRepoInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
