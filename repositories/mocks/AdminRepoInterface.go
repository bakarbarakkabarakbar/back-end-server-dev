// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	entities "user-management-backend/entities"

	mock "github.com/stretchr/testify/mock"
)

// AdminRepoInterface is an autogenerated mock type for the AdminRepoInterface type
type AdminRepoInterface struct {
	mock.Mock
}

// CreateAdmin provides a mock function with given fields: admin
func (_m *AdminRepoInterface) CreateAdmin(admin *entities.Actor) error {
	ret := _m.Called(admin)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.Actor) error); ok {
		r0 = rf(admin)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateCustomer provides a mock function with given fields: customer
func (_m *AdminRepoInterface) CreateCustomer(customer *entities.Customer) error {
	ret := _m.Called(customer)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.Customer) error); ok {
		r0 = rf(customer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateRegisterAdmin provides a mock function with given fields: register
func (_m *AdminRepoInterface) CreateRegisterAdmin(register *entities.RegisterApproval) error {
	ret := _m.Called(register)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.RegisterApproval) error); ok {
		r0 = rf(register)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAdminById provides a mock function with given fields: id
func (_m *AdminRepoInterface) GetAdminById(id *uint) (entities.Actor, error) {
	ret := _m.Called(id)

	var r0 entities.Actor
	var r1 error
	if rf, ok := ret.Get(0).(func(*uint) (entities.Actor, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(*uint) entities.Actor); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entities.Actor)
	}

	if rf, ok := ret.Get(1).(func(*uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAdminsByUsername provides a mock function with given fields: username
func (_m *AdminRepoInterface) GetAdminsByUsername(username *string) ([]entities.Actor, error) {
	ret := _m.Called(username)

	var r0 []entities.Actor
	var r1 error
	if rf, ok := ret.Get(0).(func(*string) ([]entities.Actor, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(*string) []entities.Actor); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Actor)
		}
	}

	if rf, ok := ret.Get(1).(func(*string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllAdmins provides a mock function with given fields: page
func (_m *AdminRepoInterface) GetAllAdmins(page *uint) ([]entities.Actor, error) {
	ret := _m.Called(page)

	var r0 []entities.Actor
	var r1 error
	if rf, ok := ret.Get(0).(func(*uint) ([]entities.Actor, error)); ok {
		return rf(page)
	}
	if rf, ok := ret.Get(0).(func(*uint) []entities.Actor); ok {
		r0 = rf(page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Actor)
		}
	}

	if rf, ok := ret.Get(1).(func(*uint) error); ok {
		r1 = rf(page)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllCustomers provides a mock function with given fields: page
func (_m *AdminRepoInterface) GetAllCustomers(page *uint) ([]entities.Customer, error) {
	ret := _m.Called(page)

	var r0 []entities.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(*uint) ([]entities.Customer, error)); ok {
		return rf(page)
	}
	if rf, ok := ret.Get(0).(func(*uint) []entities.Customer); ok {
		r0 = rf(page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(*uint) error); ok {
		r1 = rf(page)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomersByEmail provides a mock function with given fields: email
func (_m *AdminRepoInterface) GetCustomersByEmail(email *string) ([]entities.Customer, error) {
	ret := _m.Called(email)

	var r0 []entities.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(*string) ([]entities.Customer, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(*string) []entities.Customer); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(*string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomersByName provides a mock function with given fields: name
func (_m *AdminRepoInterface) GetCustomersByName(name *string) ([]entities.Customer, error) {
	ret := _m.Called(name)

	var r0 []entities.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(*string) ([]entities.Customer, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(*string) []entities.Customer); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(*string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyAdmin provides a mock function with given fields: admin
func (_m *AdminRepoInterface) ModifyAdmin(admin *entities.Actor) error {
	ret := _m.Called(admin)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.Actor) error); ok {
		r0 = rf(admin)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ModifyCustomer provides a mock function with given fields: customer
func (_m *AdminRepoInterface) ModifyCustomer(customer *entities.Customer) error {
	ret := _m.Called(customer)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.Customer) error); ok {
		r0 = rf(customer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveCustomerById provides a mock function with given fields: id
func (_m *AdminRepoInterface) RemoveCustomerById(id *uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(*uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewAdminRepoInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewAdminRepoInterface creates a new instance of AdminRepoInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAdminRepoInterface(t mockConstructorTestingTNewAdminRepoInterface) *AdminRepoInterface {
	mock := &AdminRepoInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
