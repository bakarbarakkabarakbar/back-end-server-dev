// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	entities "user-management-backend/entities"

	mock "github.com/stretchr/testify/mock"
)

// CustomerRepoInterface is an autogenerated mock type for the CustomerRepoInterface type
type CustomerRepoInterface struct {
	mock.Mock
}

// GetCustomerByEmail provides a mock function with given fields: email
func (_m *CustomerRepoInterface) GetCustomerByEmail(email *string) (entities.Customer, error) {
	ret := _m.Called(email)

	var r0 entities.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(*string) (entities.Customer, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(*string) entities.Customer); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(entities.Customer)
	}

	if rf, ok := ret.Get(1).(func(*string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomerById provides a mock function with given fields: id
func (_m *CustomerRepoInterface) GetCustomerById(id *uint) (entities.Customer, error) {
	ret := _m.Called(id)

	var r0 entities.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(*uint) (entities.Customer, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(*uint) entities.Customer); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entities.Customer)
	}

	if rf, ok := ret.Get(1).(func(*uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCustomerRepoInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewCustomerRepoInterface creates a new instance of CustomerRepoInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCustomerRepoInterface(t mockConstructorTestingTNewCustomerRepoInterface) *CustomerRepoInterface {
	mock := &CustomerRepoInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
